type DepositedNFT @entity{
  id: ID! # address.concat(tokenId)
  collectionName: String
  collectionSymbol: String
  address: Bytes!
  tokenId: BigInt!
  lootbox: SingleLootbox!
  name: String
  description: String
  image: String
}

type Winner @entity{
  id: ID! # ticketId
  winnerAddress: Bytes!
  ticket: Ticket!
  lootbox: SingleLootbox!
  nft: DepositedNFT!
  isClaimed: Boolean!
}

type SingleLootbox @entity {
  id: ID! # lootboxId
  drawTimestamp: BigInt!
  ticketPrice: BigInt!
  minimumTicketRequired: BigInt!
  maxTicketPerWallet: BigInt!
  owner: Bytes!
  ticketSold: BigInt!
  numNFT: BigInt!
  isDrawn: Boolean!
  isRefundable: Boolean!
  name: String!
  boxId: BigInt!
  nft: [DepositedNFT!] @derivedFrom(field: "lootbox")
  tickets: [Ticket!] @derivedFrom(field: "lootbox")
  players: [Bytes!]
}

type Ticket @entity {
  id: ID! # tokenId
  owner: Bytes!
  ticketId: BigInt!
  lootbox: SingleLootbox!
  isWinner: Boolean!
  isClaimed: Boolean!
  isRefunded: Boolean!
  wonNFT: DepositedNFT
}